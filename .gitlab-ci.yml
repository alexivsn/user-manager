stages:
  - build
  - test
  - deploy

.create_tag: &create_tag
  before_script:
    - export DATE=$(date +"%Y-%m-%d")
    - export TAG="${DATE}-${CI_COMMIT_SHA:0:8}"

build-and-push-develop:
  <<: *create_tag
  services:
    - docker:dind
  image: docker:latest
  stage: build
  tags:
    - build
  script:
    - docker login ${DOCKER_REGISTRY} -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
    - docker build --pull -t ${DOCKER_REGISTRY_IMAGE}:${TAG} .
    - docker push "${DOCKER_REGISTRY_IMAGE}:${TAG}"
  only:
    - develop

deploy-to-kubernetes-develop:
  <<: *create_tag
  image: mastanggt/kubectl:latest
  stage: deploy
  tags:
    - deploy
  script:
    - export IMAGE="$DOCKER_REGISTRY_IMAGE:${TAG}"
    - echo $SANDBOX_KUBE_CONFIG | base64 -d > admin.conf
    - cat deploy-template.yaml | envsubst > deploy.yaml
    - kubectl --kubeconfig=admin.conf replace -f deploy.yaml
  only:
    - develop

docker-build-test:
  <<: *create_tag
  services:
    - docker:dind
  image: docker:latest
  stage: build
  tags:
    - test
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker build --pull -t ${CI_REGISTRY_IMAGE}:${TAG} .
  except:
    - develop

unit-tests:
  <<: *create_tag
  services:
    - docker:dind
  image: docker:latest
  stage: test
  tags:
    - test
  script:
    - docker build --pull -f Dockerfile.unittests -t ${CI_REGISTRY_IMAGE}-unittests:${TAG} .
    - docker run --rm ${CI_REGISTRY_IMAGE}-unittests:${TAG}
    - docker rmi -f ${CI_REGISTRY_IMAGE}-unittests:${TAG}

lint-check:
  <<: *create_tag
  services:
    - docker:dind
  image: docker:latest
  stage: test
  tags:
    - test
  script:
    - docker build --pull -f Dockerfile.gometalinter -t ${CI_REGISTRY_IMAGE}-lint:${TAG} .
    - docker run --rm ${CI_REGISTRY_IMAGE}-lint:${TAG}
    - docker rmi -f ${CI_REGISTRY_IMAGE}-lint:${TAG}

migrations-test:
  <<: *create_tag
  variables:
    POSTGRES_USER: migtest
    POSTGRES_PASSWORD: migtest
    POSTGRES_DB: migtest
  services:
    - docker:dind
    - postgres:10-alpine
  image: docker:latest
  stage: test
  script:
    - 'docker build --pull -f Dockerfile.migrationtests -e MIGRATIONS_DIR=./migrations
      -t ${CI_REGISTRY_IMAGE}-psql-migrations-test:${TAG} .'
    - 'docker run --rm -e DB_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB?sslmode=disable"
      ${CI_REGISTRY_IMAGE}-psql-migrations-test:${TAG} '
    - docker rmi -f ${CI_REGISTRY_IMAGE}-psql-migrations-test:${TAG}